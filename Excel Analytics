<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ExcelAnalytics Pro - Full MERN Stack Project</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap');
        body { font-family: 'Inter', sans-serif; transition: all 0.3s ease; }
        .fade-in { animation: fadeIn 0.3s ease-in; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .slide-in { animation: slideIn 0.3s ease-out; }
        @keyframes slideIn { from { transform: translateX(-100%); } to { transform: translateX(0); } }
        .upload-area { transition: all 0.3s ease; }
        .upload-area:hover { transform: translateY(-2px); }
        .chart-container { position: relative; height: 300px; }
        .code-block { background: #1e293b; color: #e2e8f0; padding: 1rem; border-radius: 0.5rem; overflow-x: auto; }
        .tab-button { transition: all 0.2s; }
        .tab-button.active { background: #059669; color: white; }
        

    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen">
    <!-- Authentication Screen -->
    <div id="loginScreen" class="min-h-screen flex items-center justify-center p-4">
        <div class="bg-white rounded-2xl shadow-xl p-8 w-full max-w-md fade-in">
            <div class="text-center mb-8">
                <div class="w-16 h-16 bg-gradient-to-r from-green-600 to-blue-600 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg class="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                    </svg>
                </div>
                <h1 class="text-2xl font-bold text-gray-900">ExcelAnalytics Pro</h1>
                <p class="text-gray-600 mt-2">Full MERN Stack Excel Analytics Platform</p>
            </div>

            <!-- Auth Toggle Tabs -->
            <div class="flex mb-6 bg-gray-100 rounded-lg p-1">
                <button id="loginTab" onclick="showAuthForm('login')" class="flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all bg-white text-gray-900 shadow-sm">
                    Sign In
                </button>
                <button id="signupTab" onclick="showAuthForm('signup')" class="flex-1 py-2 px-4 text-sm font-medium rounded-md transition-all text-gray-600 hover:text-gray-900">
                    Sign Up
                </button>
            </div>
            
            <!-- Login Form -->
            <form id="loginForm" class="auth-form space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    <input type="email" id="loginEmail" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Enter your email" required>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                    <input type="password" id="loginPassword" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Enter your password" required>
                </div>
                
                <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-blue-600 text-white py-3 px-4 rounded-lg hover:from-green-700 hover:to-blue-700 transition-all font-medium">
                    Sign In to Analytics
                </button>
            </form>

            <!-- Signup Form -->
            <form id="signupForm" class="auth-form hidden space-y-6">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                    <input type="text" id="signupName" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Enter your full name" required>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                    <input type="email" id="signupEmail" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Enter your email" required>
                </div>
                
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Password</label>
                    <input type="password" id="signupPassword" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Create a password" required>
                </div>

                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">Confirm Password</label>
                    <input type="password" id="confirmPassword" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-all" placeholder="Confirm your password" required>
                </div>

                <div class="flex items-start">
                    <input type="checkbox" id="agreeTerms" class="mt-1 h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded" required>
                    <label for="agreeTerms" class="ml-2 text-sm text-gray-600">
                        I agree to the <a href="#" class="text-green-600 hover:text-green-500">Terms of Service</a> and <a href="#" class="text-green-600 hover:text-green-500">Privacy Policy</a>
                    </label>
                </div>
                
                <button type="submit" class="w-full bg-gradient-to-r from-green-600 to-blue-600 text-white py-3 px-4 rounded-lg hover:from-green-700 hover:to-blue-700 transition-all font-medium">
                    Create Account
                </button>
            </form>
            
            <div class="mt-6 text-center">
                <p class="text-sm text-gray-600">Demo account:</p>
                <button onclick="quickLogin()" class="text-xs text-green-600 hover:text-green-500 mt-1">analyst@demo.com / password</button>
            </div>
        </div>
    </div>

    <!-- Main Dashboard -->
    <div id="mainDashboard" class="hidden min-h-screen">
        <!-- Navigation -->
        <nav class="bg-white shadow-sm border-b border-gray-200">
            <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                <div class="flex justify-between h-16">
                    <div class="flex items-center">
                        <div class="w-8 h-8 bg-gradient-to-r from-green-600 to-blue-600 rounded-lg flex items-center justify-center">
                            <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                        </div>
                        <span class="ml-3 text-xl font-semibold text-gray-900">ExcelAnalytics Pro</span>
                        <span class="ml-2 px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">MERN</span>
                    </div>
                    
                    <div class="flex items-center space-x-6">
                        <button onclick="showSection('upload')" class="nav-btn text-sm text-gray-600 hover:text-gray-900 transition-colors">Upload</button>
                        <button onclick="showSection('analytics')" class="nav-btn text-sm text-gray-600 hover:text-gray-900 transition-colors">Analytics</button>
                
                        <div class="flex items-center space-x-2">
                            <span class="text-sm text-gray-700">Welcome, <span id="userName" class="font-medium">Analyst</span></span>
                            <button onclick="logout()" class="text-sm text-gray-500 hover:text-gray-700 transition-colors">Logout</button>
                        </div>
                    </div>
                </div>
            </div>
        </nav>

        <!-- Upload Section -->
        <div id="uploadSection" class="section max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="mb-8">
                <h1 class="text-3xl font-bold text-gray-900">Excel File Upload</h1>
                <p class="text-gray-600 mt-2">Upload and process Excel files for analytics</p>
            </div>

            <!-- Upload Area -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-8 mb-8">
                <div id="uploadArea" class="upload-area border-2 border-dashed border-gray-300 rounded-lg p-12 text-center hover:border-green-400 hover:bg-green-50 cursor-pointer transition-all">
                    <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                    </svg>
                    <h3 class="text-lg font-medium text-gray-900 mb-2">Drop Excel files here</h3>
                    <p class="text-gray-600 mb-4">or click to browse (.xlsx, .xls, .csv)</p>
                    <button class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors">
                        Choose Files
                    </button>
                    <input type="file" id="fileInput" class="hidden" accept=".xlsx,.xls,.csv" multiple>
                </div>
            </div>

            <!-- Processing Status -->
            <div id="processingStatus" class="hidden bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
                <div class="flex items-center">
                    <div class="animate-spin rounded-full h-8 w-8 border-b-2 border-green-600 mr-4"></div>
                    <div>
                        <h3 class="font-medium text-gray-900">Processing Files...</h3>
                        <p class="text-sm text-gray-600">Analyzing data structure and generating insights</p>
                    </div>
                </div>
                <div class="mt-4">
                    <div class="bg-gray-200 rounded-full h-2">
                        <div id="progressBar" class="bg-green-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                    </div>
                    <p class="text-sm text-gray-600 mt-2">Processing: <span id="currentStep">Uploading file...</span></p>
                </div>
            </div>

            <!-- Uploaded Files List -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Recent Uploads</h2>
                </div>
                <div class="p-6">
                    <div id="filesList" class="space-y-4">
                        <div id="noFilesMessage" class="text-center py-8">
                            <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">No files uploaded yet</h3>
                            <p class="text-gray-600">Upload your first Excel or CSV file to get started with analytics</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Analytics Section -->
        <div id="analyticsSection" class="section hidden max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
            <div class="mb-8">
                <h1 class="text-3xl font-bold text-gray-900">Data Analytics Dashboard</h1>
                <p class="text-gray-600 mt-2">Interactive charts and insights from your Excel data</p>
            </div>

            <!-- Analytics Controls -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6 mb-8">
                <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                    <select id="datasetSelect" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white text-gray-900">
                        <option>Select Dataset</option>
                    </select>
                    
                    <select id="chartTypeSelect" class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent bg-white text-gray-900">
                        <option>Chart Type</option>
                        <option value="bar">Bar Chart</option>
                        <option value="line">Line Chart</option>
                        <option value="pie">Pie Chart</option>
                        <option value="scatter">Scatter Plot</option>
                    </select>
                    
                    <button onclick="generateChart()" class="bg-green-600 text-white px-6 py-2 rounded-lg hover:bg-green-700 transition-colors">
                        Generate Chart
                    </button>
                    
                    <div class="relative">
                        <button onclick="toggleExportMenu()" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition-colors flex items-center space-x-2">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            <span>Export Analysis</span>
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </button>
                        
                        <!-- Export Options Dropdown -->
                        <div id="exportMenu" class="hidden absolute top-full left-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 z-50">
                            <div class="py-2">
                                <button onclick="exportAnalyticsAsPNG()" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2">
                                    <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                                    </svg>
                                    <span>Export as PNG</span>
                                </button>
                                <button onclick="exportFullReportAsPDF()" class="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 flex items-center space-x-2">
                                    <svg class="w-4 h-4 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    <span>Full Report PDF</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Charts Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8" id="chartsGrid">
                <!-- Sales Trend Chart -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Sales Trend Analysis</h3>
                    <div class="chart-container">
                        <canvas id="salesChart"></canvas>
                    </div>
                </div>
                
                <!-- Revenue Distribution -->
                <div class="bg-white rounded-xl shadow-sm border border-gray-100 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Revenue Distribution</h3>
                    <div class="chart-container">
                        <canvas id="revenueChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Real-time Data Insights -->
            <div class="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8" id="metricsGrid">
                <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Total Revenue</p>
                            <p class="text-2xl font-bold text-gray-900" id="totalRevenue">$2.4M</p>
                            <p class="text-sm text-green-600">+12.5% from last month</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Active Customers</p>
                            <p class="text-2xl font-bold text-gray-900" id="activeCustomers">3,456</p>
                            <p class="text-sm text-blue-600">+8.2% growth rate</p>
                        </div>
                    </div>
                </div>
                
                <div class="bg-white rounded-xl shadow-sm p-6 border border-gray-100">
                    <div class="flex items-center">
                        <div class="w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center">
                            <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                            </svg>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Avg Order Value</p>
                            <p class="text-2xl font-bold text-gray-900" id="avgOrderValue">$694</p>
                            <p class="text-sm text-purple-600">+5.7% increase</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Insights Section -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100 mb-8" id="insightsSection">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">AI-Powered Insights</h2>
                    <p class="text-sm text-gray-600 mt-1">Automatically generated insights from your data analysis</p>
                </div>
                <div class="p-6">
                    <div id="insightsContainer" class="space-y-4">
                        <div class="text-center py-8">
                            <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                            </svg>
                            <h3 class="text-lg font-medium text-gray-900 mb-2">No insights available</h3>
                            <p class="text-gray-600">Upload and analyze a file to see AI-generated insights</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Data Table Preview -->
            <div class="bg-white rounded-xl shadow-sm border border-gray-100" id="dataTableSection">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900">Data Preview</h2>
                    <p class="text-sm text-gray-600 mt-1">First 10 rows of your analyzed dataset</p>
                </div>
                <div class="overflow-x-auto">
                    <table class="w-full" id="dataPreviewTable">
                        <thead class="bg-gray-50">
                            <tr id="dataTableHeaders">
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Product</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Revenue</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Units</th>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Region</th>
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200" id="dataTableBody">
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">2024-01-15</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">Product A</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">$12,450</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">125</td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">North</td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>

    <script>
        let currentUser = null;
        let currentSection = 'upload';
        let salesChart = null;
        let revenueChart = null;
        let registeredUsers = JSON.parse(localStorage.getItem('registeredUsers') || '[]');
        let currentAuthForm = 'login';
        let uploadedFiles = [];
        let currentAnalysisData = null;

        // Initialize the application
        document.addEventListener('DOMContentLoaded', function() {
            showScreen('login');
            setupFileUpload();
        });



        // Authentication functions
        function showAuthForm(formType) {
            const loginForm = document.getElementById('loginForm');
            const signupForm = document.getElementById('signupForm');
            const loginTab = document.getElementById('loginTab');
            const signupTab = document.getElementById('signupTab');

            if (formType === 'login') {
                loginForm.classList.remove('hidden');
                signupForm.classList.add('hidden');
                loginTab.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
                loginTab.classList.remove('text-gray-600');
                signupTab.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
                signupTab.classList.add('text-gray-600');
            } else {
                signupForm.classList.remove('hidden');
                loginForm.classList.add('hidden');
                signupTab.classList.add('bg-white', 'text-gray-900', 'shadow-sm');
                signupTab.classList.remove('text-gray-600');
                loginTab.classList.remove('bg-white', 'text-gray-900', 'shadow-sm');
                loginTab.classList.add('text-gray-600');
            }
            currentAuthForm = formType;
        }

        // Handle login
        document.getElementById('loginForm').addEventListener('submit', function(e) {
            e.preventDefault();
            const email = document.getElementById('loginEmail').value;
            const password = document.getElementById('loginPassword').value;
            
            if (email === 'analyst@demo.com' && password === 'password') {
                login('Data Analyst');
                return;
            }
            
            const user = registeredUsers.find(u => u.email === email && u.password === password);
            if (user) {
                login(user.name);
            } else {
                alert('Invalid credentials. Please check your email and password.');
            }
        });

        // Handle signup
        document.getElementById('signupForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const name = document.getElementById('signupName').value;
            const email = document.getElementById('signupEmail').value;
            const password = document.getElementById('signupPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            if (password !== confirmPassword) {
                alert('Passwords do not match.');
                return;
            }
            
            if (registeredUsers.find(u => u.email === email)) {
                alert('An account with this email already exists.');
                return;
            }
            
            const newUser = {
                id: Date.now().toString(),
                name: name,
                email: email,
                password: password,
                createdAt: new Date().toISOString()
            };
            
            registeredUsers.push(newUser);
            localStorage.setItem('registeredUsers', JSON.stringify(registeredUsers));
            
            alert('Account created successfully! You can now sign in.');
            showAuthForm('login');
            document.getElementById('loginEmail').value = email;
        });

        function quickLogin() {
            document.getElementById('loginEmail').value = 'analyst@demo.com';
            document.getElementById('loginPassword').value = 'password';
            login('Data Analyst');
        }

        function login(name) {
            currentUser = name;
            document.getElementById('userName').textContent = name;
            showScreen('main');
            showSection('upload');
        }

        function logout() {
            currentUser = null;
            document.getElementById('loginEmail').value = '';
            document.getElementById('loginPassword').value = '';
            showScreen('login');
        }

        function showScreen(screen) {
            document.getElementById('loginScreen').classList.toggle('hidden', screen !== 'login');
            document.getElementById('mainDashboard').classList.toggle('hidden', screen !== 'main');
        }

        function showSection(section) {
            document.querySelectorAll('.section').forEach(s => s.classList.add('hidden'));
            document.querySelectorAll('.nav-btn').forEach(btn => {
                btn.classList.remove('text-green-600', 'font-medium');
                btn.classList.add('text-gray-600');
            });
            
            document.getElementById(section + 'Section').classList.remove('hidden');
            
            if (event && event.target) {
                event.target.classList.add('text-green-600', 'font-medium');
                event.target.classList.remove('text-gray-600');
            }
            
            currentSection = section;
            
            if (section === 'analytics' && !salesChart) {
                setTimeout(initializeCharts, 100);
            }
        }

        // File upload functionality
        function setupFileUpload() {
            const uploadArea = document.getElementById('uploadArea');
            const fileInput = document.getElementById('fileInput');

            uploadArea.addEventListener('click', () => fileInput.click());
            
            uploadArea.addEventListener('dragover', (e) => {
                e.preventDefault();
                uploadArea.classList.add('border-green-400', 'bg-green-50');
            });
            
            uploadArea.addEventListener('dragleave', () => {
                uploadArea.classList.remove('border-green-400', 'bg-green-50');
            });
            
            uploadArea.addEventListener('drop', (e) => {
                e.preventDefault();
                uploadArea.classList.remove('border-green-400', 'bg-green-50');
                handleFiles(e.dataTransfer.files);
            });
            
            fileInput.addEventListener('change', (e) => {
                handleFiles(e.target.files);
            });
        }

        function handleFiles(files) {
            if (files.length === 0) return;
            
            const maxSize = 10 * 1024 * 1024;
            const validTypes = ['.xlsx', '.xls', '.csv'];
            
            const invalidFiles = [];
            const oversizedFiles = [];
            
            Array.from(files).forEach(file => {
                const fileExt = file.name.toLowerCase().substring(file.name.lastIndexOf('.'));
                if (!validTypes.includes(fileExt)) {
                    invalidFiles.push(file.name);
                }
                if (file.size > maxSize) {
                    oversizedFiles.push(file.name);
                }
            });
            
            if (invalidFiles.length > 0) {
                alert(`Invalid file types: ${invalidFiles.join(', ')}\nPlease upload only Excel (.xlsx, .xls) or CSV files.`);
                return;
            }
            
            if (oversizedFiles.length > 0) {
                alert(`Files too large (max 10MB): ${oversizedFiles.join(', ')}`);
                return;
            }
            
            const statusDiv = document.getElementById('processingStatus');
            const progressBar = document.getElementById('progressBar');
            const currentStep = document.getElementById('currentStep');
            
            statusDiv.classList.remove('hidden');
            progressBar.style.width = '0%';
            currentStep.textContent = 'Starting file processing...';
            
            processFilesSequentially(Array.from(files));
        }

        function processFilesSequentially(files) {
            let currentFileIndex = 0;
            
            function processNextFile() {
                if (currentFileIndex >= files.length) {
                    setTimeout(() => {
                        document.getElementById('processingStatus').classList.add('hidden');
                        alert(`Successfully processed ${files.length} file(s)! Check the Analytics section for insights.`);
                        
                        if (uploadedFiles.length > 0) {
                            showSection('analytics');
                        }
                    }, 500);
                    return;
                }
                
                const file = files[currentFileIndex];
                processFile(file, currentFileIndex, files.length, () => {
                    currentFileIndex++;
                    setTimeout(processNextFile, 300);
                });
            }
            
            processNextFile();
        }

        function processFile(file, index, totalFiles, callback) {
            const fileName = file.name;
            const fileSize = file.size;
            const fileType = file.type;
            
            const validTypes = [
                'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                'application/vnd.ms-excel',
                'text/csv',
                'application/csv'
            ];
            
            const validExtensions = ['.xlsx', '.xls', '.csv'];
            const fileExtension = fileName.toLowerCase().substring(fileName.lastIndexOf('.'));
            
            if (!validTypes.includes(fileType) && !validExtensions.includes(fileExtension)) {
                alert(`Invalid file type: ${fileName}. Please upload Excel (.xlsx, .xls) or CSV files only.`);
                return;
            }

            const steps = [
                { text: `Processing ${fileName} (${index + 1}/${totalFiles})...`, progress: 20 },
                { text: 'Reading file content...', progress: 40 },
                { text: 'Parsing data structure...', progress: 60 },
                { text: 'Analyzing data patterns...', progress: 80 },
                { text: 'Generating insights and statistics...', progress: 100 }
            ];
            
            let currentStepIndex = 0;
            const progressBar = document.getElementById('progressBar');
            const currentStep = document.getElementById('currentStep');
            
            const processStep = () => {
                if (currentStepIndex < steps.length) {
                    const step = steps[currentStepIndex];
                    currentStep.textContent = step.text;
                    progressBar.style.width = step.progress + '%';
                    currentStepIndex++;
                    setTimeout(processStep, 600);
                } else {
                    setTimeout(() => {
                        readAndProcessFile(file, fileName, fileSize, fileExtension, index, totalFiles, callback);
                    }, 300);
                }
            };
            
            processStep();
        }

        function readAndProcessFile(file, fileName, fileSize, fileExtension, index, totalFiles, callback) {
            const reader = new FileReader();
            
            reader.onload = function(e) {
                try {
                    let data = [];
                    let headers = [];
                    
                    if (fileExtension === '.csv') {
                        const csvData = parseCSV(e.target.result);
                        data = csvData.data;
                        headers = csvData.headers;
                    } else {
                        const excelData = parseExcelFile(e.target.result);
                        data = excelData.data;
                        headers = excelData.headers;
                    }
                    
                    if (!data || data.length === 0) {
                        throw new Error('No data found in file or file is empty');
                    }
                    
                    const processedFile = {
                        id: Date.now() + index,
                        name: fileName,
                        size: fileSize,
                        type: fileExtension,
                        uploadedAt: new Date(),
                        data: data,
                        headers: headers,
                        rowCount: data.length,
                        columnCount: headers.length,
                        status: 'completed'
                    };
                    
                    addFileToList(processedFile);
                    updateAnalyticsWithFileData(processedFile);
                    
                    if (callback) callback();
                    
                } catch (error) {
                    console.error('Error processing file:', error);
                    alert(`Error processing ${fileName}: ${error.message}`);
                    
                    if (callback) callback();
                }
            };
            
            reader.onerror = function() {
                alert(`Error reading file: ${fileName}`);
                if (callback) callback();
            };
            
            if (fileExtension === '.csv') {
                reader.readAsText(file);
            } else {
                reader.readAsArrayBuffer(file);
            }
        }

        function parseCSV(csvText) {
            try {
                const normalizedText = csvText.replace(/\r\n/g, '\n').replace(/\r/g, '\n');
                const lines = normalizedText.split('\n').filter(line => line.trim());
                
                if (lines.length === 0) {
                    throw new Error('CSV file is empty');
                }
                
                function parseCSVLine(line) {
                    const result = [];
                    let current = '';
                    let inQuotes = false;
                    let i = 0;
                    
                    while (i < line.length) {
                        const char = line[i];
                        const nextChar = line[i + 1];
                        
                        if (char === '"') {
                            if (inQuotes && nextChar === '"') {
                                current += '"';
                                i += 2;
                                continue;
                            } else {
                                inQuotes = !inQuotes;
                            }
                        } else if (char === ',' && !inQuotes) {
                            result.push(current.trim());
                            current = '';
                        } else {
                            current += char;
                        }
                        i++;
                    }
                    
                    result.push(current.trim());
                    return result.map(val => val.replace(/^"|"$/g, ''));
                }
                
                const headerLine = parseCSVLine(lines[0]);
                const headers = headerLine.map((h, index) => {
                    const cleaned = h.trim();
                    return cleaned || `Column_${index + 1}`;
                });
                
                if (headers.length === 0) {
                    throw new Error('No headers found in CSV file');
                }
                
                const data = [];
                
                for (let i = 1; i < lines.length; i++) {
                    const values = parseCSVLine(lines[i]);
                    
                    if (values.every(val => !val.trim())) continue;
                    
                    const row = {};
                    headers.forEach((header, index) => {
                        let cellValue = values[index] || '';
                        
                        if (cellValue.trim()) {
                            const cleanValue = cellValue.replace(/[$,€£¥%]/g, '').trim();
                            
                            if (!isNaN(cleanValue) && !isNaN(parseFloat(cleanValue)) && cleanValue !== '') {
                                cellValue = parseFloat(cleanValue);
                            }
                        }
                        
                        row[header] = cellValue;
                    });
                    
                    data.push(row);
                }
                
                if (data.length === 0) {
                    throw new Error('No data rows found in CSV file');
                }
                
                return { headers, data };
                
            } catch (error) {
                console.error('Error parsing CSV file:', error);
                throw new Error(`Failed to parse CSV file: ${error.message}`);
            }
        }

        function parseExcelFile(arrayBuffer) {
            try {
                const workbook = XLSX.read(arrayBuffer, { 
                    type: 'array',
                    cellDates: true,
                    cellNF: false,
                    cellText: false
                });
                
                if (!workbook.SheetNames || workbook.SheetNames.length === 0) {
                    throw new Error('No worksheets found in Excel file');
                }
                
                const firstSheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[firstSheetName];
                
                if (!worksheet) {
                    throw new Error('Unable to read worksheet data');
                }
                
                const jsonData = XLSX.utils.sheet_to_json(worksheet, { 
                    header: 1,
                    defval: '',
                    blankrows: false
                });
                
                if (jsonData.length === 0) {
                    throw new Error('Excel worksheet is empty');
                }
                
                const rawHeaders = jsonData[0] || [];
                const headers = rawHeaders.map((header, index) => {
                    if (header === null || header === undefined || header === '') {
                        return `Column_${index + 1}`;
                    }
                    return String(header).trim();
                });
                
                if (headers.length === 0) {
                    throw new Error('No columns found in Excel file');
                }
                
                const dataRows = jsonData.slice(1);
                const data = [];
                
                dataRows.forEach((row, rowIndex) => {
                    if (!row || row.every(cell => cell === null || cell === undefined || cell === '')) {
                        return;
                    }
                    
                    const rowObject = {};
                    headers.forEach((header, colIndex) => {
                        let cellValue = row[colIndex];
                        
                        if (cellValue !== null && cellValue !== undefined && cellValue !== '') {
                            if (cellValue instanceof Date) {
                                cellValue = cellValue.toISOString().split('T')[0];
                            }
                            else if (typeof cellValue === 'number' && cellValue > 25000 && cellValue < 50000) {
                                try {
                                    const excelDate = XLSX.SSF.parse_date_code(cellValue);
                                    if (excelDate && excelDate.y && excelDate.m && excelDate.d) {
                                        cellValue = `${excelDate.y}-${String(excelDate.m).padStart(2, '0')}-${String(excelDate.d).padStart(2, '0')}`;
                                    }
                                } catch (e) {
                                    // Keep original number if date parsing fails
                                }
                            }
                            else if (typeof cellValue === 'string') {
                                cellValue = cellValue.trim();
                            }
                        } else {
                            cellValue = '';
                        }
                        
                        rowObject[header] = cellValue;
                    });
                    
                    data.push(rowObject);
                });
                
                if (data.length === 0) {
                    throw new Error('No data rows found in Excel file');
                }
                
                return { headers, data };
                
            } catch (error) {
                console.error('Error parsing Excel file:', error);
                throw new Error(`Failed to parse Excel file: ${error.message}`);
            }
        }

        function addFileToList(file) {
            uploadedFiles.push(file);
            
            const filesList = document.getElementById('filesList');
            const noFilesMessage = document.getElementById('noFilesMessage');
            
            if (noFilesMessage) {
                noFilesMessage.style.display = 'none';
            }
            
            const fileItem = document.createElement('div');
            fileItem.className = 'flex items-center justify-between p-4 bg-gray-50 rounded-lg fade-in';
            fileItem.id = `file-${file.id}`;
            
            const fileIcon = file.type === '.csv' ? 'text-blue-600' : 'text-green-600';
            const fileBg = file.type === '.csv' ? 'bg-blue-100' : 'bg-green-100';
            
            fileItem.innerHTML = `
                <div class="flex items-center">
                    <div class="w-10 h-10 ${fileBg} rounded-lg flex items-center justify-center mr-4">
                        <svg class="w-5 h-5 ${fileIcon}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="font-medium text-gray-900">${file.name}</h3>
                        <p class="text-sm text-gray-600">Uploaded ${formatTimeAgo(file.uploadedAt)} • ${file.rowCount.toLocaleString()} rows • ${file.columnCount} columns • ${formatFileSize(file.size)}</p>
                    </div>
                </div>
                <div class="flex items-center space-x-2">
                    <span class="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">Processed</span>
                    <button onclick="analyzeFile('${file.id}')" class="text-blue-600 hover:text-blue-500 text-sm font-medium">Analyze</button>
                    <button onclick="deleteFile('${file.id}')" class="text-red-600 hover:text-red-500 text-sm font-medium ml-2">Delete</button>
                </div>
            `;
            
            filesList.appendChild(fileItem);
        }

        function formatTimeAgo(date) {
            const now = new Date();
            const diffInMinutes = Math.floor((now - date) / (1000 * 60));
            
            if (diffInMinutes < 1) return 'just now';
            if (diffInMinutes < 60) return `${diffInMinutes} minutes ago`;
            if (diffInMinutes < 1440) return `${Math.floor(diffInMinutes / 60)} hours ago`;
            return `${Math.floor(diffInMinutes / 1440)} days ago`;
        }

        function formatFileSize(bytes) {
            if (bytes === 0) return '0 Bytes';
            const k = 1024;
            const sizes = ['Bytes', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }

        function analyzeFile(fileId) {
            const file = uploadedFiles.find(f => f.id == fileId);
            if (!file) {
                alert('File not found');
                return;
            }
            
            updateAnalyticsWithFileData(file);
            showSection('analytics');
        }

        function deleteFile(fileId) {
            if (confirm('Are you sure you want to delete this file?')) {
                uploadedFiles = uploadedFiles.filter(f => f.id != fileId);
                
                const fileElement = document.getElementById(`file-${fileId}`);
                if (fileElement) {
                    fileElement.remove();
                }
                
                if (uploadedFiles.length === 0) {
                    const noFilesMessage = document.getElementById('noFilesMessage');
                    if (noFilesMessage) {
                        noFilesMessage.style.display = 'block';
                    }
                }
            }
        }

        function updateAnalyticsWithFileData(file) {
            const datasetSelect = document.getElementById('datasetSelect');
            
            // Update dataset dropdown
            while (datasetSelect.children.length > 1) {
                datasetSelect.removeChild(datasetSelect.lastChild);
            }
            
            uploadedFiles.forEach(f => {
                const option = document.createElement('option');
                option.value = f.id;
                option.textContent = f.name;
                if (f.id === file.id) option.selected = true;
                datasetSelect.appendChild(option);
            });
            
            generateAnalyticsFromData(file);
        }

        function generateAnalyticsFromData(file) {
            const data = file.data;
            const headers = file.headers;
            
            currentAnalysisData = {
                file: file,
                data: data,
                headers: headers
            };
            
            const analysisResult = performDataAnalysis(data, headers);
            updateDashboardMetrics(analysisResult);
            updateChartsWithAnalysis(analysisResult, file);
            displayDataInsights(analysisResult);
            updateDataPreviewTable(file, analysisResult);
        }

        function performDataAnalysis(data, headers) {
            const analysisResult = {
                totalRows: data.length,
                totalColumns: headers.length,
                numericColumns: [],
                dateColumns: [],
                categoryColumns: [],
                statistics: {},
                insights: []
            };
            
            headers.forEach(header => {
                const columnData = data.map(row => row[header]).filter(val => val !== null && val !== undefined && val !== '');
                
                if (columnData.length === 0) return;
                
                const numericValues = columnData
                    .map(val => {
                        if (typeof val === 'number') return val;
                        if (typeof val === 'string') {
                            const cleanVal = val.replace(/[$,€£¥]/g, '').trim();
                            const parsed = parseFloat(cleanVal);
                            return isNaN(parsed) ? null : parsed;
                        }
                        return null;
                    })
                    .filter(val => val !== null && isFinite(val));
                
                if (numericValues.length > columnData.length * 0.6) {
                    analysisResult.numericColumns.push(header);
                    
                    analysisResult.statistics[header] = {
                        count: numericValues.length,
                        sum: numericValues.reduce((a, b) => a + b, 0),
                        average: numericValues.reduce((a, b) => a + b, 0) / numericValues.length,
                        min: Math.min(...numericValues),
                        max: Math.max(...numericValues)
                    };
                }
            });
            
            return analysisResult;
        }

        function updateDashboardMetrics(analysisData) {
            // Find the best columns for each metric based on actual data
            const metricMappings = findBestMetricColumns(analysisData, currentAnalysisData);
            
            // Update Total Revenue/Primary Metric
            if (metricMappings.primaryMetric) {
                const stats = analysisData.statistics[metricMappings.primaryMetric.column];
                const totalValue = stats.sum;
                
                let displayValue, unit;
                if (totalValue >= 1000000000) {
                    displayValue = (totalValue / 1000000000).toFixed(1);
                    unit = 'B';
                } else if (totalValue >= 1000000) {
                    displayValue = (totalValue / 1000000).toFixed(1);
                    unit = 'M';
                } else if (totalValue >= 1000) {
                    displayValue = (totalValue / 1000).toFixed(1);
                    unit = 'K';
                } else {
                    displayValue = totalValue.toFixed(0);
                    unit = '';
                }
                
                document.getElementById('totalRevenue').textContent = `${displayValue}${unit}`;
                
                // Update the metric label
                const revenueLabel = document.querySelector('#totalRevenue').parentElement.querySelector('p');
                revenueLabel.textContent = metricMappings.primaryMetric.label;
            } else {
                document.getElementById('totalRevenue').textContent = analysisData.totalRows.toLocaleString();
                const revenueLabel = document.querySelector('#totalRevenue').parentElement.querySelector('p');
                revenueLabel.textContent = 'Total Records';
            }
            
            // Update Active Customers/Secondary Metric
            if (metricMappings.secondaryMetric) {
                const stats = analysisData.statistics[metricMappings.secondaryMetric.column];
                document.getElementById('activeCustomers').textContent = stats.count.toLocaleString();
                
                const customersLabel = document.querySelector('#activeCustomers').parentElement.querySelector('p');
                customersLabel.textContent = metricMappings.secondaryMetric.label;
            } else {
                document.getElementById('activeCustomers').textContent = analysisData.totalColumns.toLocaleString();
                const customersLabel = document.querySelector('#activeCustomers').parentElement.querySelector('p');
                customersLabel.textContent = 'Total Columns';
            }
            
            // Update Average Order Value/Third Metric
            if (metricMappings.tertiaryMetric) {
                const stats = analysisData.statistics[metricMappings.tertiaryMetric.column];
                const avgValue = stats.average;
                document.getElementById('avgOrderValue').textContent = avgValue.toFixed(2);
                
                const avgLabel = document.querySelector('#avgOrderValue').parentElement.querySelector('p');
                avgLabel.textContent = metricMappings.tertiaryMetric.label;
            } else if (analysisData.numericColumns.length > 0) {
                const stats = analysisData.statistics[analysisData.numericColumns[0]];
                document.getElementById('avgOrderValue').textContent = stats.average.toFixed(2);
                
                const avgLabel = document.querySelector('#avgOrderValue').parentElement.querySelector('p');
                avgLabel.textContent = `Avg ${analysisData.numericColumns[0]}`;
            } else {
                document.getElementById('avgOrderValue').textContent = formatFileSize(currentAnalysisData.file.size);
                const avgLabel = document.querySelector('#avgOrderValue').parentElement.querySelector('p');
                avgLabel.textContent = 'File Size';
            }
        }

        function findBestMetricColumns(analysisData, fileData) {
            const mappings = {
                primaryMetric: null,
                secondaryMetric: null,
                tertiaryMetric: null
            };
            
            // Priority keywords for different metrics
            const primaryKeywords = ['revenue', 'sales', 'total', 'amount', 'income', 'profit', 'value', 'price', 'cost'];
            const secondaryKeywords = ['quantity', 'count', 'units', 'items', 'orders', 'customers', 'users'];
            const tertiaryKeywords = ['average', 'avg', 'rate', 'percentage', 'score', 'rating'];
            
            // Find primary metric (usually revenue/sales related)
            for (let keyword of primaryKeywords) {
                const column = analysisData.numericColumns.find(col => 
                    col.toLowerCase().includes(keyword)
                );
                if (column) {
                    mappings.primaryMetric = {
                        column: column,
                        label: `Total ${column}`
                    };
                    break;
                }
            }
            
            // Find secondary metric (usually count/quantity related)
            for (let keyword of secondaryKeywords) {
                const column = analysisData.numericColumns.find(col => 
                    col.toLowerCase().includes(keyword) && 
                    col !== mappings.primaryMetric?.column
                );
                if (column) {
                    mappings.secondaryMetric = {
                        column: column,
                        label: `Total ${column}`
                    };
                    break;
                }
            }
            
            // Find tertiary metric (usually average/rate related)
            for (let keyword of tertiaryKeywords) {
                const column = analysisData.numericColumns.find(col => 
                    col.toLowerCase().includes(keyword) && 
                    col !== mappings.primaryMetric?.column &&
                    col !== mappings.secondaryMetric?.column
                );
                if (column) {
                    mappings.tertiaryMetric = {
                        column: column,
                        label: `Avg ${column}`
                    };
                    break;
                }
            }
            
            // Fallback: use available numeric columns
            if (!mappings.primaryMetric && analysisData.numericColumns.length > 0) {
                mappings.primaryMetric = {
                    column: analysisData.numericColumns[0],
                    label: `Total ${analysisData.numericColumns[0]}`
                };
            }
            
            if (!mappings.secondaryMetric && analysisData.numericColumns.length > 1) {
                mappings.secondaryMetric = {
                    column: analysisData.numericColumns[1],
                    label: `Total ${analysisData.numericColumns[1]}`
                };
            }
            
            if (!mappings.tertiaryMetric && analysisData.numericColumns.length > 2) {
                mappings.tertiaryMetric = {
                    column: analysisData.numericColumns[2],
                    label: `Avg ${analysisData.numericColumns[2]}`
                };
            } else if (!mappings.tertiaryMetric && analysisData.numericColumns.length > 0) {
                mappings.tertiaryMetric = {
                    column: mappings.primaryMetric?.column || analysisData.numericColumns[0],
                    label: `Avg ${mappings.primaryMetric?.column || analysisData.numericColumns[0]}`
                };
            }
            
            return mappings;
        }

        function updateChartsWithAnalysis(analysisData, file) {
            // Wait for charts to be initialized
            setTimeout(() => {
                if (analysisData.numericColumns.length >= 1) {
                    const col1 = analysisData.numericColumns[0];
                    
                    // Create meaningful labels from data
                    const chartData = file.data.slice(0, 12).map((row, index) => {
                        // Try to find a date or name column for labels
                        let label = `Item ${index + 1}`;
                        for (let header of file.headers) {
                            const headerLower = header.toLowerCase();
                            if (headerLower.includes('date') || headerLower.includes('name') || 
                                headerLower.includes('product') || headerLower.includes('category')) {
                                const value = row[header];
                                if (value && value.toString().trim()) {
                                    label = value.toString().substring(0, 15);
                                    break;
                                }
                            }
                        }
                        
                        return {
                            label: label,
                            value1: parseFloat(row[col1]) || 0,
                            value2: analysisData.numericColumns.length >= 2 ? (parseFloat(row[analysisData.numericColumns[1]]) || 0) : Math.random() * 100
                        };
                    });
                    
                    updateSalesChart(chartData, col1);
                    
                    if (analysisData.numericColumns.length >= 2) {
                        updateRevenueChart(chartData, analysisData.numericColumns[1]);
                    } else {
                        // Create a distribution chart from the single numeric column
                        updateRevenueChartDistribution(chartData, col1);
                    }
                }
            }, 500);
        }

        function generateDataInsights(analysis, fileData, metricMappings) {
            const insights = [];
            const data = fileData.data;
            const headers = fileData.headers;
            
            // Primary metric insights
            if (metricMappings.primaryMetric) {
                const stats = analysis.statistics[metricMappings.primaryMetric.column];
                const column = metricMappings.primaryMetric.column;
                
                insights.push(`${column} totals ${stats.sum.toLocaleString()} across all records`);
                insights.push(`Average ${column.toLowerCase()} per record is ${stats.average.toFixed(2)}`);
                
                if (stats.max > stats.average * 3) {
                    insights.push(`High variance detected: maximum ${column.toLowerCase()} (${stats.max.toFixed(2)}) is significantly above average`);
                }
            }
            
            // Data distribution insights
            if (analysis.numericColumns.length > 1) {
                insights.push(`Dataset contains ${analysis.numericColumns.length} quantitative metrics for comprehensive analysis`);
            }
            
            // Category insights
            const categoryColumns = headers.filter(h => !analysis.numericColumns.includes(h));
            if (categoryColumns.length > 0) {
                const firstCatCol = categoryColumns[0];
                const uniqueValues = [...new Set(data.map(row => row[firstCatCol]))].filter(v => v !== null && v !== undefined && v !== '').length;
                if (uniqueValues > 1) {
                    insights.push(`${firstCatCol} has ${uniqueValues} distinct categories for segmentation analysis`);
                }
            }
            
            // Data quality insights
            const totalCells = data.length * headers.length;
            let filledCells = 0;
            data.forEach(row => {
                headers.forEach(header => {
                    if (row[header] !== null && row[header] !== undefined && row[header] !== '') {
                        filledCells++;
                    }
                });
            });
            const completeness = (filledCells / totalCells * 100).toFixed(1);
            insights.push(`Data completeness: ${completeness}% of cells contain values`);
            
            return insights;
        }

        function displayDataInsights(analysisData) {
            const container = document.getElementById('insightsContainer');
            
            if (analysisData.numericColumns.length === 0) {
                container.innerHTML = `
                    <div class="text-center py-8">
                        <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
                        </svg>
                        <h3 class="text-lg font-medium text-gray-900 mb-2">No numeric insights available</h3>
                        <p class="text-gray-600">Upload a file with numeric data to see AI-generated insights</p>
                    </div>
                `;
                return;
            }
            
            const metricMappings = findBestMetricColumns(analysisData, currentAnalysisData);
            const insights = generateDataInsights(analysisData, currentAnalysisData, metricMappings);
            
            let insightsHTML = '';
            
            // Display generated insights
            insights.forEach((insight, index) => {
                const colors = [
                    { bg: 'bg-blue-50', border: 'border-blue-200', icon: 'text-blue-600', text: 'text-blue-900', subtext: 'text-blue-700' },
                    { bg: 'bg-green-50', border: 'border-green-200', icon: 'text-green-600', text: 'text-green-900', subtext: 'text-green-700' },
                    { bg: 'bg-purple-50', border: 'border-purple-200', icon: 'text-purple-600', text: 'text-purple-900', subtext: 'text-purple-700' },
                    { bg: 'bg-orange-50', border: 'border-orange-200', icon: 'text-orange-600', text: 'text-orange-900', subtext: 'text-orange-700' }
                ];
                const color = colors[index % colors.length];
                
                insightsHTML += `
                    <div class="${color.bg} ${color.border} border rounded-lg p-4">
                        <div class="flex items-start">
                            <div class="w-8 h-8 bg-white rounded-lg flex items-center justify-center mr-3 shadow-sm">
                                <svg class="w-4 h-4 ${color.icon}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                                </svg>
                            </div>
                            <div>
                                <h4 class="font-medium ${color.text}">Data Insight #${index + 1}</h4>
                                <p class="text-sm ${color.subtext} mt-1">${insight}</p>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            // Add numeric column statistics
            analysisData.numericColumns.forEach((column, index) => {
                const stats = analysisData.statistics[column];
                const colors = [
                    { bg: 'bg-indigo-50', border: 'border-indigo-200', icon: 'text-indigo-600', text: 'text-indigo-900', subtext: 'text-indigo-700' },
                    { bg: 'bg-pink-50', border: 'border-pink-200', icon: 'text-pink-600', text: 'text-pink-900', subtext: 'text-pink-700' }
                ];
                const color = colors[index % colors.length];
                
                insightsHTML += `
                    <div class="${color.bg} ${color.border} border rounded-lg p-4">
                        <div class="flex items-start">
                            <div class="w-8 h-8 bg-white rounded-lg flex items-center justify-center mr-3 shadow-sm">
                                <svg class="w-4 h-4 ${color.icon}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                                </svg>
                            </div>
                            <div>
                                <h4 class="font-medium ${color.text}">${column} Statistics</h4>
                                <p class="text-sm ${color.subtext} mt-1">
                                    Total: ${stats.sum.toLocaleString()} | 
                                    Average: ${stats.average.toFixed(2)} | 
                                    Range: ${stats.min.toFixed(2)} - ${stats.max.toFixed(2)}
                                </p>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = insightsHTML;
        }

        function updateDataPreviewTable(file, analysisData) {
            const headers = file.headers;
            const data = file.data.slice(0, 10);
            
            const headersRow = document.getElementById('dataTableHeaders');
            const tbody = document.getElementById('dataTableBody');
            
            headersRow.innerHTML = '';
            headers.forEach(header => {
                const th = document.createElement('th');
                th.className = 'px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider';
                th.textContent = header;
                headersRow.appendChild(th);
            });
            
            tbody.innerHTML = '';
            data.forEach(row => {
                const tr = document.createElement('tr');
                headers.forEach(header => {
                    const td = document.createElement('td');
                    td.className = 'px-6 py-4 whitespace-nowrap text-sm text-gray-900';
                    td.textContent = row[header] || '';
                    tr.appendChild(td);
                });
                tbody.appendChild(tr);
            });
        }

        function initializeCharts() {
            const salesCtx = document.getElementById('salesChart');
            const revenueCtx = document.getElementById('revenueChart');
            
            if (salesChart) {
                salesChart.destroy();
            }
            if (revenueChart) {
                revenueChart.destroy();
            }
            
            salesChart = new Chart(salesCtx, {
                type: 'line',
                data: {
                    labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                    datasets: [{
                        label: 'Sales Trend',
                        data: [12000, 19000, 15000, 25000, 22000, 30000],
                        borderColor: 'rgb(34, 197, 94)',
                        backgroundColor: 'rgba(34, 197, 94, 0.1)',
                        tension: 0.4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            revenueChart = new Chart(revenueCtx, {
                type: 'doughnut',
                data: {
                    labels: ['Product A', 'Product B', 'Product C', 'Product D'],
                    datasets: [{
                        data: [35, 25, 25, 15],
                        backgroundColor: [
                            'rgb(34, 197, 94)',
                            'rgb(59, 130, 246)',
                            'rgb(168, 85, 247)',
                            'rgb(249, 115, 22)'
                        ]
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            position: 'bottom'
                        }
                    }
                }
            });
        }

        function updateSalesChart(data, columnName) {
            if (salesChart) {
                salesChart.data.labels = data.map(item => item.label);
                salesChart.data.datasets[0].data = data.map(item => item.value1);
                salesChart.data.datasets[0].label = columnName;
                salesChart.update();
            }
        }

        function updateRevenueChart(data, columnName) {
            if (revenueChart) {
                revenueChart.data.labels = data.map(item => item.label);
                revenueChart.data.datasets[0].data = data.map(item => item.value2);
                revenueChart.update();
            }
        }

        function updateRevenueChartDistribution(data, columnName) {
            if (revenueChart) {
                // Create value ranges for distribution
                const values = data.map(item => item.value1).filter(v => v > 0);
                const min = Math.min(...values);
                const max = Math.max(...values);
                const range = (max - min) / 4;
                
                const ranges = [
                    { label: `${min.toFixed(0)}-${(min + range).toFixed(0)}`, count: 0 },
                    { label: `${(min + range).toFixed(0)}-${(min + 2*range).toFixed(0)}`, count: 0 },
                    { label: `${(min + 2*range).toFixed(0)}-${(min + 3*range).toFixed(0)}`, count: 0 },
                    { label: `${(min + 3*range).toFixed(0)}-${max.toFixed(0)}`, count: 0 }
                ];
                
                values.forEach(value => {
                    if (value <= min + range) ranges[0].count++;
                    else if (value <= min + 2*range) ranges[1].count++;
                    else if (value <= min + 3*range) ranges[2].count++;
                    else ranges[3].count++;
                });
                
                revenueChart.data.labels = ranges.map(r => r.label);
                revenueChart.data.datasets[0].data = ranges.map(r => r.count);
                revenueChart.update();
            }
        }

        function generateChart() {
            const datasetId = document.getElementById('datasetSelect').value;
            const chartType = document.getElementById('chartTypeSelect').value;
            
            if (!datasetId || datasetId === 'Select Dataset') {
                alert('Please select a dataset first');
                return;
            }
            
            if (!chartType || chartType === 'Chart Type') {
                alert('Please select a chart type');
                return;
            }
            
            const file = uploadedFiles.find(f => f.id == datasetId);
            if (!file) {
                alert('Dataset not found');
                return;
            }
            
            // Clear existing charts and create new ones
            clearChartsGrid();
            createAutoChart(file, chartType);
        }

        function clearChartsGrid() {
            const chartsGrid = document.getElementById('chartsGrid');
            chartsGrid.innerHTML = '';
        }

        function createAutoChart(file, chartType) {
            const chartsGrid = document.getElementById('chartsGrid');
            
            // Automatically select best columns for the chart
            const chartAnalysis = performDataAnalysis(file.data, file.headers);
            let xColumn, yColumn;
            
            // Smart column selection based on chart type
            if (chartType === 'pie') {
                // For pie charts, find a category column and a numeric column
                xColumn = findBestCategoryColumn(file.headers, file.data);
                yColumn = chartAnalysis.numericColumns[0] || file.headers[1];
            } else {
                // For other charts, use first available columns or best numeric columns
                if (chartAnalysis.numericColumns.length >= 2) {
                    xColumn = chartAnalysis.numericColumns[0];
                    yColumn = chartAnalysis.numericColumns[1];
                } else if (chartAnalysis.numericColumns.length >= 1) {
                    xColumn = findBestCategoryColumn(file.headers, file.data) || file.headers[0];
                    yColumn = chartAnalysis.numericColumns[0];
                } else {
                    xColumn = file.headers[0];
                    yColumn = file.headers[1] || file.headers[0];
                }
            }
            
            // Create chart container
            const chartContainer = document.createElement('div');
            chartContainer.className = 'bg-white rounded-xl shadow-sm border border-gray-100 p-6 col-span-full';
            chartContainer.innerHTML = `
                <div class="flex justify-between items-center mb-4">
                    <h3 class="text-lg font-semibold text-gray-900">${file.name} - ${chartType.charAt(0).toUpperCase() + chartType.slice(1)} Chart</h3>
                    <span class="px-3 py-1 bg-green-100 text-green-800 text-xs font-medium rounded-full">${chartType.toUpperCase()}</span>
                </div>
                <div class="chart-container" style="position: relative; height: 400px;">
                    <canvas id="dynamicChart"></canvas>
                </div>
            `;
            
            chartsGrid.appendChild(chartContainer);
            
            // Process data for the chart
            const processedData = processChartData(file.data, xColumn, yColumn, chartType);
            
            // Create the chart
            setTimeout(() => {
                const ctx = document.getElementById('dynamicChart');
                if (ctx) {
                    createChartInstance(ctx, processedData, chartType, xColumn, yColumn);
                }
            }, 100);
        }
        
        function findBestCategoryColumn(headers, data) {
            // Look for columns that seem like categories (text, dates, names)
            for (let header of headers) {
                const headerLower = header.toLowerCase();
                if (headerLower.includes('name') || headerLower.includes('category') || 
                    headerLower.includes('type') || headerLower.includes('product') ||
                    headerLower.includes('region') || headerLower.includes('department') ||
                    headerLower.includes('date')) {
                    return header;
                }
            }
            
            // If no obvious category column, find one with reasonable text values
            for (let header of headers) {
                const sampleValues = data.slice(0, 5).map(row => row[header]);
                const hasText = sampleValues.some(val => 
                    typeof val === 'string' && val.length > 0 && val.length < 50
                );
                if (hasText) {
                    return header;
                }
            }
            
            return headers[0]; // Fallback to first column
        }

        function processChartData(data, xColumn, yColumn, chartType) {
            let processedData = data.slice(0, 20); // Limit for better visualization
            
            if (chartType === 'pie') {
                // For pie charts, aggregate data by categories
                const aggregated = {};
                processedData.forEach(row => {
                    const category = row[xColumn] || 'Unknown';
                    const value = parseFloat(row[yColumn]) || 0;
                    
                    if (aggregated[category]) {
                        aggregated[category] += value;
                    } else {
                        aggregated[category] = value;
                    }
                });
                
                return {
                    labels: Object.keys(aggregated),
                    values: Object.values(aggregated)
                };
            } else {
                // For other chart types
                const chartData = processedData.map(row => {
                    let xValue = row[xColumn];
                    let yValue = parseFloat(row[yColumn]) || 0;
                    
                    // Handle different data types for x-axis
                    if (typeof xValue === 'string' && xValue.length > 15) {
                        xValue = xValue.substring(0, 15) + '...';
                    }
                    
                    return {
                        x: xValue || 'N/A',
                        y: yValue
                    };
                }).filter(item => item.y !== 0 || chartType === 'scatter');
                
                return {
                    labels: chartData.map(item => item.x),
                    values: chartData.map(item => item.y)
                };
            }
        }

        function createChartInstance(ctx, data, chartType, xColumn, yColumn) {
            const config = {
                type: chartType,
                data: {
                    labels: data.labels,
                    datasets: [{
                        label: `${yColumn}`,
                        data: data.values,
                        backgroundColor: getChartColors(chartType, data.values.length),
                        borderColor: getChartBorderColors(chartType, data.values.length),
                        borderWidth: chartType === 'line' ? 3 : 1,
                        tension: chartType === 'line' ? 0.4 : 0,
                        fill: chartType === 'line' ? true : false
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: chartType === 'pie',
                            position: chartType === 'pie' ? 'right' : 'top'
                        },
                        title: {
                            display: true,
                            text: `${yColumn} Analysis by ${xColumn}`,
                            font: {
                                size: 16,
                                weight: 'bold'
                            },
                            color: '#1f2937'
                        }
                    },
                    scales: chartType !== 'pie' ? {
                        x: {
                            title: {
                                display: true,
                                text: xColumn,
                                font: {
                                    weight: 'bold'
                                }
                            },
                            ticks: {
                                maxRotation: 45
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: yColumn,
                                font: {
                                    weight: 'bold'
                                }
                            },
                            beginAtZero: true
                        }
                    } : {}
                }
            };
            
            // Special handling for scatter plots
            if (chartType === 'scatter') {
                config.data.datasets[0].data = data.labels.map((label, index) => ({
                    x: index,
                    y: data.values[index]
                }));
                config.options.scales.x.type = 'linear';
            }
            
            new Chart(ctx, config);
        }

        function getChartColors(chartType, count) {
            const colors = [
                'rgba(34, 197, 94, 0.8)',   // Green
                'rgba(59, 130, 246, 0.8)',   // Blue
                'rgba(168, 85, 247, 0.8)',   // Purple
                'rgba(249, 115, 22, 0.8)',   // Orange
                'rgba(239, 68, 68, 0.8)',    // Red
                'rgba(236, 72, 153, 0.8)',   // Pink
                'rgba(14, 165, 233, 0.8)',   // Sky
                'rgba(132, 204, 22, 0.8)',   // Lime
                'rgba(245, 158, 11, 0.8)',   // Amber
                'rgba(139, 69, 19, 0.8)'     // Brown
            ];
            
            if (chartType === 'line') {
                return 'rgba(34, 197, 94, 0.2)';
            }
            
            if (chartType === 'pie') {
                return colors.slice(0, count);
            }
            
            return colors[0]; // Single color for bar charts
        }

        function getChartBorderColors(chartType, count) {
            const borderColors = [
                'rgb(34, 197, 94)',   // Green
                'rgb(59, 130, 246)',   // Blue
                'rgb(168, 85, 247)',   // Purple
                'rgb(249, 115, 22)',   // Orange
                'rgb(239, 68, 68)',    // Red
                'rgb(236, 72, 153)',   // Pink
                'rgb(14, 165, 233)',   // Sky
                'rgb(132, 204, 22)',   // Lime
                'rgb(245, 158, 11)',   // Amber
                'rgb(139, 69, 19)'     // Brown
            ];
            
            if (chartType === 'pie') {
                return borderColors.slice(0, count);
            }
            
            return borderColors[0];
        }

        function toggleExportMenu() {
            const menu = document.getElementById('exportMenu');
            menu.classList.toggle('hidden');
        }

        // Export Functions

        async function exportAnalyticsAsPNG() {
            if (!currentAnalysisData) {
                alert('No data to export. Please analyze a file first.');
                return;
            }

            try {
                // Create a professional export container
                const exportContainer = document.createElement('div');
                exportContainer.style.cssText = `
                    position: fixed;
                    top: -10000px;
                    left: 0;
                    width: 1200px;
                    background: white;
                    padding: 40px;
                    font-family: 'Inter', sans-serif;
                `;
                
                const currentDate = new Date().toLocaleDateString('en-US', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                });
                
                exportContainer.innerHTML = `
                    <div style="text-align: center; margin-bottom: 30px; border-bottom: 3px solid #059669; padding-bottom: 20px;">
                        <h1 style="font-size: 32px; font-weight: bold; color: #1f2937; margin: 0;">ExcelAnalytics Pro</h1>
                        <h2 style="font-size: 24px; color: #059669; margin: 10px 0;">Data Analytics Dashboard</h2>
                        <p style="font-size: 16px; color: #6b7280; margin: 5px 0;">Generated on ${currentDate}</p>
                        <p style="font-size: 14px; color: #6b7280; margin: 0;">File: ${currentAnalysisData.file.name}</p>
                    </div>
                    
                    <div style="display: grid; grid-template-columns: 1fr 1fr 1fr; gap: 20px; margin-bottom: 30px;">
                        <div style="background: #f0fdf4; border: 2px solid #bbf7d0; border-radius: 12px; padding: 20px; text-align: center;">
                            <div style="font-size: 14px; color: #059669; font-weight: 600; margin-bottom: 5px;">TOTAL RECORDS</div>
                            <div style="font-size: 28px; font-weight: bold; color: #1f2937;">${currentAnalysisData.data.length.toLocaleString()}</div>
                        </div>
                        <div style="background: #eff6ff; border: 2px solid #bfdbfe; border-radius: 12px; padding: 20px; text-align: center;">
                            <div style="font-size: 14px; color: #2563eb; font-weight: 600; margin-bottom: 5px;">TOTAL COLUMNS</div>
                            <div style="font-size: 28px; font-weight: bold; color: #1f2937;">${currentAnalysisData.headers.length}</div>
                        </div>
                        <div style="background: #faf5ff; border: 2px solid #d8b4fe; border-radius: 12px; padding: 20px; text-align: center;">
                            <div style="font-size: 14px; color: #7c3aed; font-weight: 600; margin-bottom: 5px;">FILE SIZE</div>
                            <div style="font-size: 28px; font-weight: bold; color: #1f2937;">${formatFileSize(currentAnalysisData.file.size)}</div>
                        </div>
                    </div>
                `;
                
                // Clone and add charts
                const chartsGrid = document.getElementById('chartsGrid').cloneNode(true);
                chartsGrid.style.cssText = 'display: grid; grid-template-columns: 1fr 1fr; gap: 30px; margin-bottom: 30px;';
                exportContainer.appendChild(chartsGrid);
                
                // Add insights section
                const insightsClone = document.getElementById('insightsSection').cloneNode(true);
                insightsClone.style.cssText = 'margin-bottom: 20px; border: 1px solid #e5e7eb; border-radius: 12px;';
                exportContainer.appendChild(insightsClone);
                
                // Add footer
                const footer = document.createElement('div');
                footer.style.cssText = 'text-align: center; margin-top: 30px; padding-top: 20px; border-top: 2px solid #e5e7eb; color: #6b7280; font-size: 12px;';
                footer.innerHTML = `
                    <p>Generated by ExcelAnalytics Pro - Professional Data Analysis Platform</p>
                    <p>© ${new Date().getFullYear()} ExcelAnalytics Pro. All rights reserved.</p>
                `;
                exportContainer.appendChild(footer);
                
                document.body.appendChild(exportContainer);
                
                const canvas = await html2canvas(exportContainer, {
                    backgroundColor: '#ffffff',
                    scale: 2,
                    useCORS: true,
                    allowTaint: true,
                    width: 1200,
                    height: exportContainer.scrollHeight
                });
                
                document.body.removeChild(exportContainer);
                
                // Create download link
                const link = document.createElement('a');
                link.download = `ExcelAnalytics-Pro-Dashboard-${currentAnalysisData.file.name.replace(/\.[^/.]+$/, "")}-${new Date().toISOString().split('T')[0]}.png`;
                link.href = canvas.toDataURL('image/png', 1.0);
                
                // Trigger download
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                
                alert('Professional PNG dashboard exported successfully!');
                toggleExportMenu();
                
            } catch (error) {
                console.error('Error exporting PNG:', error);
                alert('Error exporting PNG. Please try again.');
            }
        }

        async function exportFullReportAsPDF() {
            if (!currentAnalysisData) {
                alert('No data to export. Please analyze a file first.');
                return;
            }

            try {
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('p', 'mm', 'a4');
                const pageWidth = pdf.internal.pageSize.getWidth();
                const pageHeight = pdf.internal.pageSize.getHeight();
                let yPosition = 30;
                
                // Professional Header with Logo Area
                pdf.setFillColor(5, 150, 105); // Green color
                pdf.rect(0, 0, pageWidth, 25, 'F');
                
                pdf.setTextColor(255, 255, 255);
                pdf.setFontSize(20);
                pdf.setFont('helvetica', 'bold');
                pdf.text('ExcelAnalytics Pro', 20, 17);
                
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'normal');
                pdf.text('Professional Data Analytics Report', pageWidth - 20, 17, { align: 'right' });
                
                // Reset text color and position
                pdf.setTextColor(0, 0, 0);
                yPosition = 45;
                
                // Title Section
                pdf.setFontSize(24);
                pdf.setFont('helvetica', 'bold');
                pdf.text('Complete Analytics Report', 20, yPosition);
                yPosition += 15;
                
                // Subtitle with border
                pdf.setDrawColor(5, 150, 105);
                pdf.setLineWidth(0.5);
                pdf.line(20, yPosition, pageWidth - 20, yPosition);
                yPosition += 10;
                
                // Report Details Box
                pdf.setFillColor(248, 250, 252);
                pdf.rect(20, yPosition, pageWidth - 40, 35, 'F');
                pdf.setDrawColor(226, 232, 240);
                pdf.rect(20, yPosition, pageWidth - 40, 35, 'S');
                
                yPosition += 10;
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'bold');
                pdf.text('Report Details:', 25, yPosition);
                yPosition += 8;
                
                pdf.setFont('helvetica', 'normal');
                pdf.text(`File Name: ${currentAnalysisData.file.name}`, 25, yPosition);
                yPosition += 6;
                pdf.text(`Generated: ${new Date().toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                })}`, 25, yPosition);
                yPosition += 6;
                pdf.text(`Total Records: ${currentAnalysisData.data.length.toLocaleString()}`, 25, yPosition);
                yPosition += 6;
                pdf.text(`Total Columns: ${currentAnalysisData.headers.length}`, 25, yPosition);
                yPosition += 20;
                
                // Executive Summary Section
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(5, 150, 105);
                pdf.text('Executive Summary', 20, yPosition);
                yPosition += 10;
                
                pdf.setDrawColor(5, 150, 105);
                pdf.line(20, yPosition, 80, yPosition);
                yPosition += 10;
                
                pdf.setTextColor(0, 0, 0);
                pdf.setFontSize(11);
                pdf.setFont('helvetica', 'normal');
                
                const analysis = performDataAnalysis(currentAnalysisData.data, currentAnalysisData.headers);
                
                // Generate dynamic insights based on actual data
                const metricMappings = findBestMetricColumns(analysis, currentAnalysisData);
                const insights = generateDataInsights(analysis, currentAnalysisData, metricMappings);
                
                const summaryText = [
                    `This comprehensive analysis covers ${analysis.totalRows.toLocaleString()} data records`,
                    `across ${analysis.totalColumns} columns from "${currentAnalysisData.file.name}".`,
                    ``,
                    `Key Findings:`,
                    `• ${analysis.numericColumns.length} numeric columns identified for quantitative analysis`,
                    `• ${currentAnalysisData.headers.length - analysis.numericColumns.length} categorical/text columns for segmentation`,
                    ...insights.slice(0, 4).map(insight => `• ${insight}`)
                ];
                
                summaryText.forEach(line => {
                    if (line === '') {
                        yPosition += 4;
                    } else {
                        pdf.text(line, 20, yPosition);
                        yPosition += 6;
                    }
                });
                
                if (analysis.numericColumns.length > 0) {
                    yPosition += 5;
                    const firstNumCol = analysis.numericColumns[0];
                    const stats = analysis.statistics[firstNumCol];
                    pdf.setFont('helvetica', 'bold');
                    pdf.text(`Primary Metric Analysis (${firstNumCol}):`, 20, yPosition);
                    yPosition += 6;
                    pdf.setFont('helvetica', 'normal');
                    pdf.text(`Total Value: ${stats.sum.toLocaleString()}`, 25, yPosition);
                    yPosition += 5;
                    pdf.text(`Average: ${stats.average.toFixed(2)}`, 25, yPosition);
                    yPosition += 5;
                    pdf.text(`Range: ${stats.min.toFixed(2)} - ${stats.max.toFixed(2)}`, 25, yPosition);
                }
                
                // New Page for Charts
                pdf.addPage();
                yPosition = 30;
                
                // Charts Section Header
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(5, 150, 105);
                pdf.text('Data Visualizations', 20, yPosition);
                yPosition += 10;
                
                pdf.setDrawColor(5, 150, 105);
                pdf.line(20, yPosition, 90, yPosition);
                yPosition += 15;
                
                // Add Charts
                const chartsGrid = document.getElementById('chartsGrid');
                if (chartsGrid) {
                    const canvas = await html2canvas(chartsGrid, {
                        backgroundColor: '#ffffff',
                        scale: 2,
                        useCORS: true
                    });
                    
                    const imgData = canvas.toDataURL('image/png', 1.0);
                    pdf.addImage(imgData, 'PNG', 20, yPosition, pageWidth - 40, 100);
                    yPosition += 110;
                }
                
                // Key Metrics Section
                if (yPosition > pageHeight - 80) {
                    pdf.addPage();
                    yPosition = 30;
                }
                
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(5, 150, 105);
                pdf.text('Key Performance Metrics', 20, yPosition);
                yPosition += 10;
                
                pdf.setDrawColor(5, 150, 105);
                pdf.line(20, yPosition, 110, yPosition);
                yPosition += 15;
                
                const metricsGrid = document.getElementById('metricsGrid');
                if (metricsGrid) {
                    const canvas = await html2canvas(metricsGrid, {
                        backgroundColor: '#ffffff',
                        scale: 2
                    });
                    
                    const imgData = canvas.toDataURL('image/png', 1.0);
                    pdf.addImage(imgData, 'PNG', 20, yPosition, pageWidth - 40, 60);
                    yPosition += 70;
                }
                
                // Complete Data Table Section
                pdf.addPage();
                yPosition = 30;
                
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(5, 150, 105);
                pdf.text('Complete Dataset', 20, yPosition);
                yPosition += 10;
                
                pdf.setDrawColor(5, 150, 105);
                pdf.line(20, yPosition, 80, yPosition);
                yPosition += 10;
                
                pdf.setTextColor(0, 0, 0);
                pdf.setFontSize(11);
                pdf.setFont('helvetica', 'normal');
                pdf.text(`All ${currentAnalysisData.data.length} rows from the uploaded Excel file:`, 20, yPosition);
                yPosition += 15;
                
                // Create complete data table
                const headers = currentAnalysisData.headers;
                const data = currentAnalysisData.data;
                
                // Calculate column widths based on content
                const maxCols = Math.min(headers.length, 6); // Limit columns to fit on page
                const colWidth = (pageWidth - 40) / maxCols;
                const rowHeight = 6;
                
                // Table headers
                pdf.setFillColor(5, 150, 105);
                pdf.setTextColor(255, 255, 255);
                pdf.setFontSize(9);
                pdf.setFont('helvetica', 'bold');
                
                for (let i = 0; i < maxCols; i++) {
                    const header = headers[i] || '';
                    pdf.rect(20 + (i * colWidth), yPosition, colWidth, rowHeight, 'F');
                    pdf.text(header.substring(0, 15), 22 + (i * colWidth), yPosition + 4);
                }
                yPosition += rowHeight;
                
                // Table data rows
                pdf.setTextColor(0, 0, 0);
                pdf.setFont('helvetica', 'normal');
                pdf.setFontSize(8);
                
                let rowCount = 0;
                const maxRowsPerPage = Math.floor((pageHeight - yPosition - 30) / rowHeight);
                
                for (let rowIndex = 0; rowIndex < data.length; rowIndex++) {
                    const row = data[rowIndex];
                    
                    // Check if we need a new page
                    if (rowCount >= maxRowsPerPage) {
                        pdf.addPage();
                        yPosition = 30;
                        rowCount = 0;
                        
                        // Repeat headers on new page
                        pdf.setFillColor(5, 150, 105);
                        pdf.setTextColor(255, 255, 255);
                        pdf.setFontSize(9);
                        pdf.setFont('helvetica', 'bold');
                        
                        for (let i = 0; i < maxCols; i++) {
                            const header = headers[i] || '';
                            pdf.rect(20 + (i * colWidth), yPosition, colWidth, rowHeight, 'F');
                            pdf.text(header.substring(0, 15), 22 + (i * colWidth), yPosition + 4);
                        }
                        yPosition += rowHeight;
                        
                        pdf.setTextColor(0, 0, 0);
                        pdf.setFont('helvetica', 'normal');
                        pdf.setFontSize(8);
                    }
                    
                    // Alternate row colors
                    if (rowIndex % 2 === 0) {
                        pdf.setFillColor(248, 250, 252);
                        pdf.rect(20, yPosition, pageWidth - 40, rowHeight, 'F');
                    }
                    
                    // Draw row data
                    for (let colIndex = 0; colIndex < maxCols; colIndex++) {
                        const header = headers[colIndex];
                        let cellValue = row[header] || '';
                        
                        // Format cell value
                        if (typeof cellValue === 'number') {
                            cellValue = cellValue.toLocaleString();
                        } else {
                            cellValue = String(cellValue).substring(0, 20);
                        }
                        
                        pdf.text(cellValue, 22 + (colIndex * colWidth), yPosition + 4);
                    }
                    
                    yPosition += rowHeight;
                    rowCount++;
                }
                
                // If there are more columns, add a note
                if (headers.length > maxCols) {
                    yPosition += 10;
                    pdf.setFontSize(10);
                    pdf.setFont('helvetica', 'italic');
                    pdf.setTextColor(107, 114, 128);
                    pdf.text(`Note: Showing first ${maxCols} columns. Total columns: ${headers.length}`, 20, yPosition);
                    
                    yPosition += 10;
                    pdf.text(`Additional columns: ${headers.slice(maxCols).join(', ')}`, 20, yPosition);
                }
                
                // Add summary statistics page
                pdf.addPage();
                yPosition = 30;
                
                pdf.setFontSize(16);
                pdf.setFont('helvetica', 'bold');
                pdf.setTextColor(5, 150, 105);
                pdf.text('Statistical Summary', 20, yPosition);
                yPosition += 10;
                
                pdf.setDrawColor(5, 150, 105);
                pdf.line(20, yPosition, 90, yPosition);
                yPosition += 15;
                
                pdf.setTextColor(0, 0, 0);
                pdf.setFontSize(12);
                pdf.setFont('helvetica', 'normal');
                
                const pdfAnalysis = performDataAnalysis(currentAnalysisData.data, currentAnalysisData.headers);
                
                // Column-by-column analysis
                pdf.setFont('helvetica', 'bold');
                pdf.text('Column Analysis:', 20, yPosition);
                yPosition += 10;
                
                pdf.setFont('helvetica', 'normal');
                pdf.setFontSize(10);
                
                headers.forEach((header, index) => {
                    if (yPosition > pageHeight - 40) {
                        pdf.addPage();
                        yPosition = 30;
                    }
                    
                    pdf.setFont('helvetica', 'bold');
                    pdf.text(`${index + 1}. ${header}:`, 25, yPosition);
                    yPosition += 6;
                    
                    pdf.setFont('helvetica', 'normal');
                    
                    if (pdfAnalysis.statistics[header]) {
                        const stats = pdfAnalysis.statistics[header];
                        pdf.text(`   • Type: Numeric`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Total: ${stats.sum.toLocaleString()}`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Average: ${stats.average.toFixed(2)}`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Min: ${stats.min.toFixed(2)} | Max: ${stats.max.toFixed(2)}`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Count: ${stats.count} values`, 25, yPosition);
                    } else {
                        // Analyze text/categorical data
                        const columnData = data.map(row => row[header]).filter(val => val !== null && val !== undefined && val !== '');
                        const uniqueValues = [...new Set(columnData)].length;
                        
                        pdf.text(`   • Type: Text/Categorical`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Unique values: ${uniqueValues}`, 25, yPosition);
                        yPosition += 5;
                        pdf.text(`   • Total entries: ${columnData.length}`, 25, yPosition);
                        
                        if (uniqueValues <= 10 && uniqueValues > 0) {
                            yPosition += 5;
                            const sampleValues = [...new Set(columnData)].slice(0, 5);
                            pdf.text(`   • Sample values: ${sampleValues.join(', ')}`, 25, yPosition);
                        }
                    }
                    
                    yPosition += 10;
                });
                
                // Professional Footer
                const totalPages = pdf.internal.getNumberOfPages();
                for (let i = 1; i <= totalPages; i++) {
                    pdf.setPage(i);
                    
                    // Footer background
                    pdf.setFillColor(248, 250, 252);
                    pdf.rect(0, pageHeight - 15, pageWidth, 15, 'F');
                    
                    // Footer text
                    pdf.setTextColor(107, 114, 128);
                    pdf.setFontSize(8);
                    pdf.setFont('helvetica', 'normal');
                    pdf.text('Generated by ExcelAnalytics Pro - Professional Data Analysis Platform', 20, pageHeight - 8);
                    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - 20, pageHeight - 8, { align: 'right' });
                    pdf.text(`© ${new Date().getFullYear()} ExcelAnalytics Pro. All rights reserved.`, pageWidth / 2, pageHeight - 4, { align: 'center' });
                }
                
                // Save the professional PDF
                const fileName = `ExcelAnalytics-Pro-Report-${currentAnalysisData.file.name.replace(/\.[^/.]+$/, "")}-${new Date().toISOString().split('T')[0]}.pdf`;
                pdf.save(fileName);
                
                alert('Professional PDF report exported successfully!');
                toggleExportMenu();
                
            } catch (error) {
                console.error('Error exporting full report:', error);
                alert('Error exporting full report. Please try again.');
            }
        }

        // Close export menu when clicking outside
        document.addEventListener('click', function(event) {
            const exportMenu = document.getElementById('exportMenu');
            const exportButton = event.target.closest('button[onclick="toggleExportMenu()"]');
            
            if (!exportButton && !exportMenu.contains(event.target)) {
                exportMenu.classList.add('hidden');
            }
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'98197a5130937f9f',t:'MTc1ODI4OTA0Ny4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
